import 'dart:convert';

import 'package:bprcf/data/model/me/me.dart';
import 'package:bprcf/data/model/mutation.dart';
import 'package:bprcf/data/model/profile.dart';
import 'package:bprcf/data/model/user.dart';
import 'package:bprcf/services/dio.dart';
import 'package:dio/dio.dart' as Dio;
import 'package:shared_preferences/shared_preferences.dart';

class RemoteDataSource {
  Future<DataUser> getUsers() async {
    final Dio.Response response = await dio().get('/employee');
    print(response.data);
    return DataUser.fromJson(response.data);
  }

  Future<MeModel?> getProfile() async {
    final pref = await SharedPreferences.getInstance();
    final token = pref.getString('token');
    final Dio.Response response = await dio().get('auth/me',
        options: Dio.Options(headers: {'Authorization': 'Bearer $token'}));
    // final Dio.Response response = await dio().get('https://fakestoreapi.com/products/1');
    // final Map<String, dynamic> responseData = response.data;
    // print(response.data['data']);
    return MeModel.fromJson(response.data);
// Map<String, dynamic> data = (json.decode(response.data) as Map<String, dynamic>);
//     return MeModel.fromJson(data);
  }

  Future<List<MutationModel>> getMutation() async {
    Map mutationBody = {
      'acc_number': '0011002933',
      "start_date": "2023-01-01",
      "end_date": "2023-08-01"
    };
    final Dio.Response response =
        await dio().post('history_account', data: mutationBody);
    // if (response.statusCode != 200) {
    //   print('no data');
    // } else {
    //   print(response.data);
    //    return response.data;
    // }
    final List<dynamic> responseData = response.data['data'];
    List <MutationModel> mutation = responseData.map((json) => MutationModel.fromJson(json)).toList();
   return mutation;
  }

  Future<Map<String, dynamic>?> getTerms() async {
    final pref = await SharedPreferences.getInstance();
    final token = pref.getString('token');
    final Dio.Response response = await dio().get('terms',
        options: Dio.Options(headers: {'Authorization': 'Bearer $token'}));
    print('terms token $token');
    return response.data as Map<String, dynamic>;
  }
}
